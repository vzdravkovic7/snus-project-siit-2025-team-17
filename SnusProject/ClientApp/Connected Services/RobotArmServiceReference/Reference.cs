//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.RobotArmServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationResult", Namespace="http://schemas.datacontract.org/2004/07/SnusProject.Models")]
    [System.SerializableAttribute()]
    public partial class OperationResult : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OperationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SuccessField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Operation {
            get {
                return this.OperationField;
            }
            set {
                if ((object.ReferenceEquals(this.OperationField, value) != true)) {
                    this.OperationField = value;
                    this.RaisePropertyChanged("Operation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Success {
            get {
                return this.SuccessField;
            }
            set {
                if ((this.SuccessField.Equals(value) != true)) {
                    this.SuccessField = value;
                    this.RaisePropertyChanged("Success");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RobotArmState", Namespace="http://schemas.datacontract.org/2004/07/SnusProject.Models")]
    [System.SerializableAttribute()]
    public partial class RobotArmState : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AngleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int XField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int YField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((this.AngleField.Equals(value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int X {
            get {
                return this.XField;
            }
            set {
                if ((this.XField.Equals(value) != true)) {
                    this.XField = value;
                    this.RaisePropertyChanged("X");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Y {
            get {
                return this.YField;
            }
            set {
                if ((this.YField.Equals(value) != true)) {
                    this.YField = value;
                    this.RaisePropertyChanged("Y");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RobotArmServiceReference.IRobotArmService", CallbackContract=typeof(ClientApp.RobotArmServiceReference.IRobotArmServiceCallback))]
    public interface IRobotArmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveLeft", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveLeftResponse")]
        ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveLeft(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveLeft", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveLeftResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveLeftAsync(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveRight", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveRightResponse")]
        ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveRight(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveRight", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveRightResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveRightAsync(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveUp", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveUpResponse")]
        ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveUp(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveUp", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveUpResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveUpAsync(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveDown", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveDownResponse")]
        ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveDown(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveDown", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveDownResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveDownAsync(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueRotate", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueRotateResponse")]
        ClientApp.RobotArmServiceReference.OperationResult EnqueueRotate(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueRotate", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueRotateResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueRotateAsync(int clientId, string hmac);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/GetCurrentState", ReplyAction="http://tempuri.org/IRobotArmService/GetCurrentStateResponse")]
        ClientApp.RobotArmServiceReference.RobotArmState GetCurrentState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/GetCurrentState", ReplyAction="http://tempuri.org/IRobotArmService/GetCurrentStateResponse")]
        System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.RobotArmState> GetCurrentStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/Subscribe", ReplyAction="http://tempuri.org/IRobotArmService/SubscribeResponse")]
        void Subscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/Subscribe", ReplyAction="http://tempuri.org/IRobotArmService/SubscribeResponse")]
        System.Threading.Tasks.Task SubscribeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/Unsubscribe", ReplyAction="http://tempuri.org/IRobotArmService/UnsubscribeResponse")]
        void Unsubscribe();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/Unsubscribe", ReplyAction="http://tempuri.org/IRobotArmService/UnsubscribeResponse")]
        System.Threading.Tasks.Task UnsubscribeAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRobotArmServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRobotArmService/OnStateChanged")]
        void OnStateChanged(ClientApp.RobotArmServiceReference.RobotArmState state);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRobotArmServiceChannel : ClientApp.RobotArmServiceReference.IRobotArmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RobotArmServiceClient : System.ServiceModel.DuplexClientBase<ClientApp.RobotArmServiceReference.IRobotArmService>, ClientApp.RobotArmServiceReference.IRobotArmService {
        
        public RobotArmServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public RobotArmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public RobotArmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RobotArmServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public RobotArmServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveLeft(int clientId, string hmac) {
            return base.Channel.EnqueueMoveLeft(clientId, hmac);
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveLeftAsync(int clientId, string hmac) {
            return base.Channel.EnqueueMoveLeftAsync(clientId, hmac);
        }
        
        public ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveRight(int clientId, string hmac) {
            return base.Channel.EnqueueMoveRight(clientId, hmac);
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveRightAsync(int clientId, string hmac) {
            return base.Channel.EnqueueMoveRightAsync(clientId, hmac);
        }
        
        public ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveUp(int clientId, string hmac) {
            return base.Channel.EnqueueMoveUp(clientId, hmac);
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveUpAsync(int clientId, string hmac) {
            return base.Channel.EnqueueMoveUpAsync(clientId, hmac);
        }
        
        public ClientApp.RobotArmServiceReference.OperationResult EnqueueMoveDown(int clientId, string hmac) {
            return base.Channel.EnqueueMoveDown(clientId, hmac);
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueMoveDownAsync(int clientId, string hmac) {
            return base.Channel.EnqueueMoveDownAsync(clientId, hmac);
        }
        
        public ClientApp.RobotArmServiceReference.OperationResult EnqueueRotate(int clientId, string hmac) {
            return base.Channel.EnqueueRotate(clientId, hmac);
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.OperationResult> EnqueueRotateAsync(int clientId, string hmac) {
            return base.Channel.EnqueueRotateAsync(clientId, hmac);
        }
        
        public ClientApp.RobotArmServiceReference.RobotArmState GetCurrentState() {
            return base.Channel.GetCurrentState();
        }
        
        public System.Threading.Tasks.Task<ClientApp.RobotArmServiceReference.RobotArmState> GetCurrentStateAsync() {
            return base.Channel.GetCurrentStateAsync();
        }
        
        public void Subscribe() {
            base.Channel.Subscribe();
        }
        
        public System.Threading.Tasks.Task SubscribeAsync() {
            return base.Channel.SubscribeAsync();
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
        
        public System.Threading.Tasks.Task UnsubscribeAsync() {
            return base.Channel.UnsubscribeAsync();
        }
    }
}
