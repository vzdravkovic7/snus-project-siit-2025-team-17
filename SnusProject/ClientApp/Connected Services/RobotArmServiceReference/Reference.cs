//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientApp.RobotArmServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RobotArmServiceReference.IRobotArmService")]
    public interface IRobotArmService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveLeft", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveLeftResponse")]
        void EnqueueMoveLeft(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveLeft", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveLeftResponse")]
        System.Threading.Tasks.Task EnqueueMoveLeftAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveRight", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveRightResponse")]
        void EnqueueMoveRight(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveRight", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveRightResponse")]
        System.Threading.Tasks.Task EnqueueMoveRightAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveUp", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveUpResponse")]
        void EnqueueMoveUp(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveUp", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveUpResponse")]
        System.Threading.Tasks.Task EnqueueMoveUpAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveDown", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveDownResponse")]
        void EnqueueMoveDown(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueMoveDown", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueMoveDownResponse")]
        System.Threading.Tasks.Task EnqueueMoveDownAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueRotate", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueRotateResponse")]
        void EnqueueRotate(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/EnqueueRotate", ReplyAction="http://tempuri.org/IRobotArmService/EnqueueRotateResponse")]
        System.Threading.Tasks.Task EnqueueRotateAsync(int clientId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/GetCurrentState", ReplyAction="http://tempuri.org/IRobotArmService/GetCurrentStateResponse")]
        string GetCurrentState();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRobotArmService/GetCurrentState", ReplyAction="http://tempuri.org/IRobotArmService/GetCurrentStateResponse")]
        System.Threading.Tasks.Task<string> GetCurrentStateAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRobotArmServiceChannel : ClientApp.RobotArmServiceReference.IRobotArmService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RobotArmServiceClient : System.ServiceModel.ClientBase<ClientApp.RobotArmServiceReference.IRobotArmService>, ClientApp.RobotArmServiceReference.IRobotArmService {
        
        public RobotArmServiceClient() {
        }
        
        public RobotArmServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RobotArmServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotArmServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RobotArmServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void EnqueueMoveLeft(int clientId) {
            base.Channel.EnqueueMoveLeft(clientId);
        }
        
        public System.Threading.Tasks.Task EnqueueMoveLeftAsync(int clientId) {
            return base.Channel.EnqueueMoveLeftAsync(clientId);
        }
        
        public void EnqueueMoveRight(int clientId) {
            base.Channel.EnqueueMoveRight(clientId);
        }
        
        public System.Threading.Tasks.Task EnqueueMoveRightAsync(int clientId) {
            return base.Channel.EnqueueMoveRightAsync(clientId);
        }
        
        public void EnqueueMoveUp(int clientId) {
            base.Channel.EnqueueMoveUp(clientId);
        }
        
        public System.Threading.Tasks.Task EnqueueMoveUpAsync(int clientId) {
            return base.Channel.EnqueueMoveUpAsync(clientId);
        }
        
        public void EnqueueMoveDown(int clientId) {
            base.Channel.EnqueueMoveDown(clientId);
        }
        
        public System.Threading.Tasks.Task EnqueueMoveDownAsync(int clientId) {
            return base.Channel.EnqueueMoveDownAsync(clientId);
        }
        
        public void EnqueueRotate(int clientId) {
            base.Channel.EnqueueRotate(clientId);
        }
        
        public System.Threading.Tasks.Task EnqueueRotateAsync(int clientId) {
            return base.Channel.EnqueueRotateAsync(clientId);
        }
        
        public string GetCurrentState() {
            return base.Channel.GetCurrentState();
        }
        
        public System.Threading.Tasks.Task<string> GetCurrentStateAsync() {
            return base.Channel.GetCurrentStateAsync();
        }
    }
}
